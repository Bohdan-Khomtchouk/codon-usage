load("~/codebase/Research Projects/Study_HRV/results/cohort/cohort_variables.Rdata")
View(d.HRV.cohort)
library(plyr)
library(dplyr)
d.HRV.cohort <- d.HRV.cohort %>% select(enc_age_cat, sex, race_cat, ethnicity_cat)
load("~/codebase/Research Projects/Study_HRV/data/workspace/comer_cohort_icu_txfers.Rdata")
View(d.icu_txfers)
n_distinct(d.icu_txfers$patient_id)
n_distinct(d.icu_txfers$study_id)
load("~/codebase/Research Projects/Study_HRV/results/cohort/cohort_variables.Rdata")
d.HRV.cohort <- d.HRV.cohort %>% select(study_id, enc_age_cat, sex, race_cat, ethnicity_cat)
n_distinct(d.HRV.cohort$study_id)
d.icu_txfers <- d.icu_txfers %>% filter(study_id %in% d.HRV.cohort$study_id)
View(d.icu_txfers)
sum(d.icu_txfers$outcome_picu_txfer == 1)
d.t <- merge(d.HRV.cohort, d.icu_txfers)
d.HRV.cohort <- merge(d.HRV.cohort, d.icu_txfers)
rm(d.t)
?split
?sample_n()
n.train <- .7 * nrow(d.HRV.cohort)
n.train
n.train <- floor(.7 * nrow(d.HRV.cohort))
n.train
?sample_frac()
d.t <- sample_frac(d.HRV.cohort, size = 0.7)
View(d.t)
d.train <- sample_frac(d.HRV.cohort, size = percent.train)
percent.train <- 0.7
d.train <- sample_frac(d.HRV.cohort, size = percent.train)
load("~/codebase/Research Projects/Study_HRV/results/cohort/cohort_variables.Rdata")
load("~/codebase/Research Projects/Study_HRV/data/workspace/comer_cohort_icu_txfers.Rdata")
d.HRV.cohort <- d.HRV.cohort %>% select(study_id, enc_age_cat, sex, race_cat, ethnicity_cat)
d.icu_txfers <- d.icu_txfers %>% filter(study_id %in% d.HRV.cohort$study_id) %>% select(outcome_picu_txfer)
d.HRV.cohort <- merge(d.HRV.cohort, d.icu_txfers)
rm(list = ls())
load("~/codebase/Research Projects/Study_HRV/results/cohort/cohort_variables.Rdata")
load("~/codebase/Research Projects/Study_HRV/data/workspace/comer_cohort_icu_txfers.Rdata")
d.HRV.cohort <- d.HRV.cohort %>% select(study_id, enc_age_cat, sex, race_cat, ethnicity_cat)
d.icu_txfers <- d.icu_txfers %>% filter(study_id %in% d.HRV.cohort$study_id) %>% select(outcome_picu_txfer)
d.HRV.cohort <- merge(d.HRV.cohort, d.icu_txfers)
load("~/codebase/DS Projects/12982_nicu_inf/.RData")
install.packages("devtools")
library(devtools)
install_github("uptake/updraft")
library(updraft)
myFunc <- function(a, b, c) {
return(a + 2*(floor(b/c)))
}
myModule <- CustomFunctionModule$new(name = "myFunc"
, fun = myFunc)
myModule$startExecution(list(a = 1, b = 2, c=0.3))
myModule$getOutput()
source('~/.active-rstudio-document', echo=TRUE)
?plyr
library(plyr)
?plyr
library(uptasticsearch)
library(uptasticsearch-package)
library("uptasticsearch-package")
library(uptasticsearch-package)
install_github("uptake/uptasticsearch")
install_github("uptake/uptasticsearch")
install.packages("uptasticsearch")
library(uptasticsearch)
?uptasticsearch
?updraft
?plyr
library(updraft)
source('~/.active-rstudio-document', echo=TRUE)
myFunc <- function(a, b, c) {
return(a + 2*(floor(b/c)))
}
myModule <- CustomFunctionModule$new(name = "myFunc"
, fun = myFunc)
myModule$startExecution(list(a = 1, b = 2, c=0.3))
myModule$getOutput()
detach("package:updraft", unload=TRUE)
remove.packages("updraft")
library(survival)
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
model <-
coxph(Surv(time, status) ~ x + strata(sex), test1)
View(model)
source('~/dev/cuAI/CUTG_ML_paper_datasets/models/dnatype/random_forests/train_rf_model.R', echo=TRUE)
library(plyr)
library(dplyr)
library(randomForest)
setwd("~/dev/cuAI/CUTG_ML_paper_datasets/")
load("processed_data/1e3_5kingdoms/train_1e3_3dnatype.RData")
set.seed(123)
trControl <- trainControl(method  = "cv",
number  = 5,
summaryFunction = multiClassSummary)
library(caret)
set.seed(123)
trControl <- trainControl(method  = "cv",
number  = 5,
summaryFunction = multiClassSummary)
parametersGrid <-  expand.grid(mtry = 1:64)
fit <- train(DNAtype ~ .,
method     = "rf",
trControl  = trControl,
metric     = "Mean_F1",
data       = myInput_train)
summary(fit)
fit
fit <- train(DNAtype ~ .,
method     = "rf",
trControl  = trControl,
metric     = "Mean_F1",
tuneGrid   = parametersGrid,
data       = myInput_train)
fit
rf.model <- randomForest(DNAtype ~ .,
data = myInput_train,
mtry = 10)
fit$finalModel->t
save(rf.model, file = "models/dnatype/random_forests/rf_model.RData")
save(fit, file = "models/dnatype/random_forests/rf_model_CV.RData")
setwd("~/dev/cuAI/CUTG_ML_paper_datasets/")
load("processed_data/1e3_5kingdoms/train_1e3_5kingdoms.RData")
set.seed(123)
trControl <- trainControl(method  = "cv",
number  = 5,
summaryFunction = multiClassSummary)
parametersGrid <-  expand.grid(mtry = 1:64)
fit <- train(Kingdom ~ .,
method     = "rf",
trControl  = trControl,
metric     = "Mean_F1",
data       = myInput_train,
tuneGrid   = parametersGrid)
fit
rf.model <- randomForest(Kingdom ~ .,
data = myInput_train,
mtry = 35)
save(fit, file = "models/kingdoms/random_forests/rf_model_CV.RData")
## ----------------------------------------------------------------------------------- ##
## Program to train XGBoost model using cross-validation
## ----------------------------------------------------------------------------------- ##
library(caret)
rm(list=ls())
setwd("~/dev/cuAI/CUTG_ML_paper_datasets/")
load("processed_data/1e3_5kingdoms/train_1e3_5kingdoms.RData")
set.seed(123)
# bstSparse <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
trControl <- trainControl(method  = "cv",
number  = 5,
summaryFunction = multiClassSummary)
parametersGrid <-  expand.grid(eta = 0.1,
colsample_bytree=c(0.5,0.7),
max_depth=1:10,
nrounds=100,
gamma=1,
min_child_weight=2,
subsample=0.5
)
fit <- train(Kingdom ~ .,
method     = "xgbTree",
trControl  = trControl,
metric     = "Mean_F1",
data       = myInput_train,
tuneGrid   = parametersGrid
)
fit
load("~/dev/cuAI/CUTG_ML_paper_datasets/models/kingdoms/ANN/nnet_model.RData")
View(nnet.model)
nnet.model
load("~/dev/cuAI/CUTG_ML_paper_datasets/models/kingdoms/ANN/nnet_model.RData")
nnet.model
load("~/dev/cuAI/CUTG_ML_paper_datasets/models/dnatype/ANN/nnet_model.RData")
nnet.model
0.966/1.966
2*0.966/1.966
